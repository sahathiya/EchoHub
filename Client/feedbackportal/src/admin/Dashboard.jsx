
// import React, { useEffect, useState } from 'react'
// import axiosInstance from '../utils/axiosInstance';
// import { Doughnut } from 'react-chartjs-2';
// import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';

// // Register components with Chart.js
// ChartJS.register(ArcElement, Tooltip, Legend);
// function Dashboard() {
//   const [reviewCount, setReviewCount] = useState();
//     const [avgReview, setAvgReview] = useState();
//    useEffect(()=>{
//        const fetch = async () => {
//           const response = await axiosInstance.get(`/api/admin/yearlycount`);
//           setReviewCount(response.data.totalReviews);
//           setAvgReview(response.data.averageRating);
//         };
    
//         fetch();
//    },[])

//    const data = {
//     labels: ['Red', 'Blue', 'Yellow'],
//     datasets: [
//       {
//         label: 'Votes',
//         data: [300, 50, 100],
//         backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],
//         hoverOffset: 4,
//       },
//     ],
//   };

//   const options = {
//     responsive: true,
//     plugins: {
//       legend: {
//         position: 'bottom',
//       },
//     },
//   };

//   return (
//     <div>
//       <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8 text-center">
//         <div className="bg-white p-4 sm:p-6 rounded-lg shadow">
//           <p className="text-lg font-semibold text-gray-700">Total Reviews</p>
//           <p className="text-3xl font-bold text-green-600">{reviewCount ?? 0}</p>
//         </div>
//         <div className="bg-white p-4 sm:p-6 rounded-lg shadow">
//           <p className="text-lg font-semibold text-gray-700">Average Rating</p>
//           <p className="text-3xl font-bold text-yellow-500">
//             {avgReview ? avgReview.toFixed(1) : "0.0"}
//           </p>
//         </div>
//       </div>



      
// <div className="max-w-sm w-full bg-white rounded-lg shadow-sm  p-4 md:p-6">
  
//   <div className="flex justify-between mb-3">
//       <div className="flex justify-center items-center">
//           <h5 className="text-xl font-bold leading-none text-gray-900  pe-1">Website traffic</h5>
//           <svg data-popover-target="chart-info" data-popover-placement="bottom" className="w-3.5 h-3.5 text-gray-500 dark:text-gray-800 hover:text-gray-900 dark:hover:text-white cursor-pointer ms-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
//             <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm0 16a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm1-5.034V12a1 1 0 0 1-2 0v-1.418a1 1 0 0 1 1.038-.999 1.436 1.436 0 0 0 1.488-1.441 1.501 1.501 0 1 0-3-.116.986.986 0 0 1-1.037.961 1 1 0 0 1-.96-1.037A3.5 3.5 0 1 1 11 11.466Z"/>
//           </svg>
//           <div data-popover id="chart-info" role="tooltip" className="absolute z-10 invisible inline-block text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-xs opacity-0 w-72 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400">
//               <div className="p-3 space-y-2">
//                   <h3 className="font-semibold text-gray-900 dark:text-white">Activity growth - Incremental</h3>
//                   <p>Report helps navigate cumulative growth of community activities. Ideally, the chart should have a growing trend, as stagnating chart signifies a significant decrease of community activity.</p>
//                   <h3 className="font-semibold text-gray-900 dark:text-white">Calculation</h3>
//                   <p>For each date bucket, the all-time volume of activities is calculated. This means that activities in period n contain all activities up to period n, plus the activities generated by your community in period.</p>
//                   <a href="#" className="flex items-center font-medium text-blue-600 dark:text-blue-500 dark:hover:text-blue-600 hover:text-blue-700 hover:underline">Read more <svg className="w-2 h-2 ms-1.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
//               <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
//             </svg></a>
//               </div>
//               <div data-popper-arrow></div>
//           </div>
//         </div>
//       <div>
//         <button type="button" data-tooltip-target="data-tooltip" data-tooltip-placement="bottom" className="hidden sm:inline-flex items-center justify-center text-gray-500 w-8 h-8 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm"><svg className="w-3.5 h-3.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 18">
//     <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 1v11m0 0 4-4m-4 4L4 8m11 4v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3"/>
//   </svg><span className="sr-only">Download data</span>
//         </button>
//         <div id="data-tooltip" role="tooltip" className="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-xs opacity-0 tooltip dark:bg-gray-700">
//             Download CSV
//             <div className="tooltip-arrow" data-popper-arrow></div>
//         </div>
//       </div>
//   </div>

//   <div>
//     <div className="flex" id="devices">
//       <div className="flex items-center me-4">
//           <input id="desktop" type="checkbox" value="desktop" className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded-sm focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"/>
//           <label for="desktop" className="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Desktop</label>
//       </div>
//       <div className="flex items-center me-4">
//           <input id="tablet" type="checkbox" value="tablet" className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded-sm focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"/>
//           <label for="tablet" className="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Tablet</label>
//       </div>
//       <div className="flex items-center me-4">
//           <input id="mobile" type="checkbox" value="mobile" className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded-sm focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"/>
//           <label for="mobile" className="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Mobile</label>
//       </div>
//     </div>
//   </div>

 
//   <div className="py-6" id="donut-chart">

//   <Doughnut data={data} options={options} />
//   </div>

//   <div className="grid grid-cols-1 items-center border-gray-200 border-t dark:border-gray-700 justify-between">
//     <div className="flex justify-between items-center pt-5">
     
//       <button
//         id="dropdownDefaultButton"
//         data-dropdown-toggle="lastDaysdropdown"
//         data-dropdown-placement="bottom"
//         className="text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-900 text-center inline-flex items-center dark:hover:text-white"
//         type="button">
//         Last 7 days
//         <svg className="w-2.5 m-2.5 ms-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
//           <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
//         </svg>
//       </button>
//       <div id="lastDaysdropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700">
//           <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">
//             <li>
//               <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Yesterday</a>
//             </li>
//             <li>
//               <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Today</a>
//             </li>
//             <li>
//               <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 7 days</a>
//             </li>
//             <li>
//               <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 30 days</a>
//             </li>
//             <li>
//               <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 90 days</a>
//             </li>
//           </ul>
//       </div>
//       <a
//         href="#"
//         class="uppercase text-sm font-semibold inline-flex items-center rounded-lg text-blue-600 hover:text-blue-700 dark:hover:text-blue-500  hover:bg-gray-100 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700 px-3 py-2">
//         Traffic analysis
//         <svg class="w-2.5 h-2.5 ms-1.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
//           <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
//         </svg>
//       </a>
//     </div>
//   </div>
// </div>

//     </div>
//   )
// }

// export default Dashboard
import React, { useEffect, useState } from 'react';
import axiosInstance from '../utils/axiosInstance';
import { Doughnut } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip as  ChartTooltip, Legend } from 'chart.js';
import { useSelector } from 'react-redux';
import { AreaChart, Area, XAxis, Tooltip, ResponsiveContainer } from 'recharts';


ChartJS.register(ArcElement, ChartTooltip, Legend);

const data = [
  { name: 'Mon', users: 400 },
  { name: 'Tue', users: 300 },
  { name: 'Wed', users: 500 },
  { name: 'Thu', users: 200 },
  { name: 'Fri', users: 700 },
  { name: 'Sat', users: 600 },
  { name: 'Sun', users: 800 },
];
function Dashboard() {
  const [reviewCount, setReviewCount] = useState(0);
  const [avgReview, setAvgReview] = useState(0);
  const [reviewSources, setReviewSources] = useState({});
  const users=useSelector((state)=>state.admin.users)
  useEffect(() => {
    const fetch = async () => {
      const response = await axiosInstance.get(`/api/admin/yearlycount`);
      setReviewCount(response.data.totalReviews);
      setAvgReview(response.data.averageRating);
      setReviewSources(response.data.reviewSources || {
        Reviews:100|| reviewCount,
        Users:150|| users.length,
        Average: 200||avgReview,
      }); // fallback mock data
    };

    fetch();
  }, []);

  const chartData = {
    labels: Object.keys(reviewSources),
    datasets: [
      {
        label: 'Analytics by Source',
        data: Object.values(reviewSources),
        backgroundColor: [ '#fcba03', '#20421b',  '#6cc443'],
        hoverOffset: 6,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'bottom',
      },
    },
  };

  return (
    <div className="p-4 space-y-6">
      {/* Review summary cards */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-center">
        <div className="bg-white p-6 rounded-lg shadow">
          <p className="text-lg font-semibold text-gray-700">Total Clients</p>
          <p className="text-3xl font-bold text-green-600">{users.length}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <p className="text-lg font-semibold text-gray-700">Total Reviews</p>
          <p className="text-3xl font-bold text-green-600">{reviewCount}</p>
        </div>
       
        <div className="bg-white p-6 rounded-lg shadow">
          <p className="text-lg font-semibold text-gray-700">Average Rating</p>
          <p className="text-3xl font-bold text-yellow-500">
            {avgReview ? avgReview.toFixed(1) : "0.0"}
          </p>
        </div>
      </div>
<div className='grid grid-cols-1 sm:grid-cols-2 gap-4 text-center'>
{/* Doughnut chart */}
<div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow">
        <h2 className="text-xl font-bold text-center text-gray-800 mb-4">
          Review Source Breakdown
        </h2>
        <Doughnut data={chartData} options={chartOptions} />
      </div>

      <div className="max-w-sm w-full bg-white rounded-lg shadow-sm  p-4 md:p-6">
      <div className="flex justify-between">
        <div>
          <h5 className="text-3xl font-bold text-gray-900 pb-2">32.4k</h5>
          <p className="text-base font-normal text-gray-500 dark:text-gray-400">Users this week</p>
        </div>
        <div className="flex items-center px-2.5 py-0.5 text-base font-semibold text-green-500">
          12%
          <svg className="w-3 h-3 ms-1" viewBox="0 0 10 14" fill="none">
            <path d="M5 13V1M5 1L1 5M5 1L9 5" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
          </svg>
        </div>
      </div>

      <div className="mt-4 h-40">
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart data={data}>
            <XAxis dataKey="name" />
            <Tooltip />
            <Area type="monotone" dataKey="users" stroke="#20421b" fill="#d0edc2" />
          </AreaChart>
        </ResponsiveContainer>
      </div>

      <div className="grid grid-cols-1 border-t border-gray-200 dark:border-gray-700 pt-5">
        <div className="flex justify-between items-center">
          <button
            className="text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white inline-flex items-center"
            type="button"
          >
            Last 7 days
            <svg className="w-2.5 h-2.5 ms-1.5" viewBox="0 0 10 6" fill="none">
              <path d="M1 1L5 5L9 1" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
            </svg>
          </button>
          <a
            href="#"
            className="uppercase text-sm font-semibold text-blue-600 hover:text-blue-700 dark:hover:text-blue-500 inline-flex items-center px-3 py-2"
          >
            Users Report
            <svg className="w-2.5 h-2.5 ms-1.5" viewBox="0 0 6 10" fill="none">
              <path d="M1 9L5 5L1 1" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
            </svg>
          </a>
        </div>
      </div>
    </div>
      
</div>
      
    </div>
  );
}

export default Dashboard;
